<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QingShan.Core</name>
    </assembly>
    <members>
        <member name="T:QingShan.Core.App">
            <summary>
            全局应用类
            </summary>
        </member>
        <member name="F:QingShan.Core.App.Assemblies">
            <summary>
            应用有效程序集
            </summary>
        </member>
        <member name="F:QingShan.Core.App.CanBeScanTypes">
            <summary>
            能够被扫描的类型
            </summary>
        </member>
        <member name="F:QingShan.Core.App.LoggedCodes">
            <summary>
            只需要登录权限的code
            </summary>
        </member>
        <member name="M:QingShan.Core.App.#cctor">
            <summary>
            静态构造函数，只在程序启动时执行一次。
            </summary>
        </member>
        <member name="M:QingShan.Core.App.GetLoggedInCode">
            <summary>
            获取登录后访问的权限
            </summary>
            <returns></returns>
        </member>
        <member name="F:QingShan.Core.App.AppStartups">
            <summary>
            应用所有启动配置对象
            </summary>
        </member>
        <member name="M:QingShan.Core.App.GetAssemblies">
            <summary>
            获取应用有效程序集
            </summary>
            <returns>IEnumerable</returns>
        </member>
        <member name="T:QingShan.Core.AppStartupAttribute">
            <summary>
            注册服务启动配置
            </summary>
        </member>
        <member name="M:QingShan.Core.AppStartupAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:QingShan.Core.AppStartupAttribute.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:QingShan.Core.MiniProfilerCategory">
            <summary>
            MiniProfiler分类
            </summary>
        </member>
        <member name="F:QingShan.Core.MiniProfilerCategory.MINI_PROFILER_SQL">
            <summary>
            sql
            </summary>
        </member>
        <member name="T:QingShan.Core.InternalApp">
            <summary>
            内部 App 副本
            </summary>
        </member>
        <member name="F:QingShan.Core.InternalApp.InternalServices">
            <summary>
            应用服务
            </summary>
        </member>
        <member name="F:QingShan.Core.InternalApp.ConfigurationBuilder">
            <summary>
            全局配置构建器
            </summary>
        </member>
        <member name="M:QingShan.Core.InternalApp.AddConfigureFiles(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            添加配置文件
            </summary>
            <param name="config"></param>
            <param name="env"></param>
        </member>
        <member name="M:QingShan.Core.InternalApp.AutoAddJsonFiles(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            自动加载自定义 .json 配置文件
            </summary>
            <param name="config"></param>
            <param name="env"></param>
        </member>
        <member name="M:QingShan.Core.InternalApp.AutoAddXmlFiles(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            自动加载自定义 .xml 配置文件
            </summary>
            <param name="config"></param>
            <param name="env"></param>
        </member>
        <member name="F:QingShan.Core.InternalApp.excludeJsons">
            <summary>
            默认排除配置项
            </summary>
        </member>
        <member name="F:QingShan.Core.InternalApp.runtimeJsonSuffixs">
            <summary>
            运行时 Json 后缀
            </summary>
        </member>
        <member name="T:QingShan.Core.StartupFilter">
            <summary>
            应用启动时自动注册中间件
            </summary>
            <remarks>
            https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/startup?view=aspnetcore-3.1#add-configuration-at-startup-from-an-external-assembly
            </remarks>
        </member>
        <member name="F:QingShan.Core.StartupFilter.DotNetFrameworkResponseHeader">
            <summary>
            dotnet 框架响应报文头
            </summary>
        </member>
        <member name="M:QingShan.Core.StartupFilter.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            配置中间件
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.StartupFilter.UseStartup(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)">
            <summary>
            配置 Startup 的 Configure
            </summary>
            <param name="app">应用构建器</param>
            <param name="applicationServices">服务提供器</param>
        </member>
        <member name="M:QingShan.Core.StartupFilter.ResolveMethodParameterInstances(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider,System.Reflection.MethodInfo)">
            <summary>
            解析方法参数实例
            </summary>
            <param name="app"></param>
            <param name="applicationServices"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:QingShan.Core.Options.AppSettingsOptions">
            <summary>
            应用全局配置
            </summary>
        </member>
        <member name="P:QingShan.Core.Options.AppSettingsOptions.EnabledReferenceAssemblyScan">
            <summary>
            是否启用引用程序集扫描
            </summary>
        </member>
        <member name="P:QingShan.Core.Options.AppSettingsOptions.ExternalAssemblies">
            <summary>
            外部程序集
            </summary>
        </member>
        <member name="M:QingShan.Core.Options.AppSettingsOptions.PostConfigure(QingShan.Core.Options.AppSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:QingShan.Core.IDispatchProxy">
            <summary>
            代理拦截依赖接口
            </summary>
        </member>
        <member name="P:QingShan.Core.IDispatchProxy.Target">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:QingShan.Core.IDispatchProxy.Services">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="T:QingShan.Core.AppStartup">
            <summary>
            依赖注入全局模块
            </summary>
        </member>
        <member name="T:QingShan.Core.HostingStartup">
            <summary>
            配置程序启动时自动注入
            </summary>
        </member>
        <member name="M:QingShan.Core.HostingStartup.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            配置应用启动
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:QingShan.Core.CorsAccessor.CorsAccessorSettingsOptions">
            <summary>
            跨域配置选项
            </summary>
        </member>
        <member name="P:QingShan.Core.CorsAccessor.CorsAccessorSettingsOptions.PolicyName">
            <summary>
            策略名称
            </summary>
        </member>
        <member name="P:QingShan.Core.CorsAccessor.CorsAccessorSettingsOptions.WithOrigins">
            <summary>
            允许来源域名，没有配置则允许所有来源
            </summary>
        </member>
        <member name="P:QingShan.Core.CorsAccessor.CorsAccessorSettingsOptions.WithHeaders">
            <summary>
            请求表头，没有配置则允许所有表头
            </summary>
        </member>
        <member name="P:QingShan.Core.CorsAccessor.CorsAccessorSettingsOptions.WithExposedHeaders">
            <summary>
            响应标头
            </summary>
        </member>
        <member name="P:QingShan.Core.CorsAccessor.CorsAccessorSettingsOptions.WithMethods">
            <summary>
            设置跨域允许请求谓词，没有配置则允许所有
            </summary>
        </member>
        <member name="P:QingShan.Core.CorsAccessor.CorsAccessorSettingsOptions.AllowCredentials">
            <summary>
            跨域请求中的凭据
            </summary>
        </member>
        <member name="P:QingShan.Core.CorsAccessor.CorsAccessorSettingsOptions.SetPreflightMaxAge">
            <summary>
            设置预检过期时间
            </summary>
        </member>
        <member name="M:QingShan.Core.CorsAccessor.CorsAccessorSettingsOptions.PostConfigure(QingShan.Core.CorsAccessor.CorsAccessorSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:QingShan.Core.FreeSql.Options.DatabaseAccessorSettingsOptions">
            <summary>
            数据库配置选项
            </summary>
        </member>
        <member name="P:QingShan.Core.FreeSql.Options.DatabaseAccessorSettingsOptions.Type">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:QingShan.Core.FreeSql.Options.DatabaseAccessorSettingsOptions.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:QingShan.Core.FreeSql.Options.DatabaseAccessorSettingsOptions.SyncStructure">
            <summary>
            【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体表是否存在，然后创建或修改
            <para>注意：生产环境中谨慎使用</para>
            </summary>
        </member>
        <member name="P:QingShan.Core.FreeSql.Options.DatabaseAccessorSettingsOptions.PrintingSQL">
            <summary>
            打印sql
            </summary>
        </member>
        <member name="P:QingShan.Core.FreeSql.Options.DatabaseAccessorSettingsOptions.GlobalFilter">
            <summary>
            全局过滤
            </summary>
        </member>
        <member name="M:QingShan.Core.FreeSql.Options.DatabaseAccessorSettingsOptions.PostConfigure(QingShan.Core.FreeSql.Options.DatabaseAccessorSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:QingShan.Core.FreeSql.IKeyRepository`2">
            <summary>
            仓储
            动态的主键<typeparamref name="TKey"/>
            </summary>
        </member>
        <member name="T:QingShan.Core.FreeSql.IRepository`1">
            <summary>
            仓储
            </summary>
        </member>
        <member name="M:QingShan.Core.FreeSql.IRepository`1.DeleteAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            逻辑删除
            </summary>
            <param name="ids">id集合</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:QingShan.Core.FreeSql.KeyRepository`2">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:QingShan.Core.FreeSql.KeyRepository`2.DeleteAsync(`1,System.Threading.CancellationToken)">
            <summary>
            删除
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:QingShan.Core.FreeSql.Repository`1">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:QingShan.Core.FreeSql.Repository`1.DeleteAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            逻辑删除
            </summary>
            <param name="ids">id集合</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.FreeSql.Repository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            删除
            </summary>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.FreeSql.Repository`1.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            删除
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.FreeSql.Repository`1.InsertOrUpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            添加或删除
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:QingShan.Core.FreeSql.UnitOfWork.Attributes.NonTransactAttribute">
            <summary>
            禁用工作单元特性
            </summary>
            <remarks>
            <para>慎用！一旦贴了此特性，单次请求中有任何异常代码，对数据库的任何更改将不会回滚。</para>
            <para>支持方法中贴此特性</para>
            <para>注意：只对请求中的起始方法起作用</para>
            </remarks>
        </member>
        <member name="T:QingShan.Core.FreeSql.UnitOfWork.Attributes.UnitOfWorkAttribute">
            <summary>
            工作单元配置特性
            </summary>
            <remarks>
            <para>支持配置事务范围、隔离级别、跨线程异步流</para>
            <para>只能在方法中贴此特性，通常贴在最外层的方法中，如果在子方法中贴该特性，将启用嵌套子事务</para>
            <para>注意：只对请求中的起始方法起作用</para>
            </remarks>
        </member>
        <member name="M:QingShan.Core.FreeSql.UnitOfWork.Attributes.UnitOfWorkAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:QingShan.Core.FreeSql.UnitOfWork.Attributes.UnitOfWorkAttribute.#ctor(System.Transactions.IsolationLevel)">
            <summary>
            构造函数
            </summary>
            <remarks>
            <para>支持传入事务隔离级别 <see cref="P:QingShan.Core.FreeSql.UnitOfWork.Attributes.UnitOfWorkAttribute.IsolationLevel"/> 参数值</para>
            </remarks>
            <param name="isolationLevel">事务隔离级别</param>
        </member>
        <member name="M:QingShan.Core.FreeSql.UnitOfWork.Attributes.UnitOfWorkAttribute.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.IsolationLevel)">
            <summary>
            构造函数
            </summary>
            <remarks>
            <para>支持传入 事务范围 <see cref="T:System.Transactions.TransactionScope"/>，事务级别 <see cref="P:QingShan.Core.FreeSql.UnitOfWork.Attributes.UnitOfWorkAttribute.IsolationLevel"/> 参数值</para>
            </remarks>
            <param name="scopeOption">事务范围</param>
            <param name="isolationLevel">事务隔离级别</param>
        </member>
        <member name="P:QingShan.Core.FreeSql.UnitOfWork.Attributes.UnitOfWorkAttribute.ScopeOption">
            <summary>
            事务范围
            </summary>
            <remarks>
            <para>默认：<see cref="F:System.Transactions.TransactionScopeOption.Required"/>，参见：<see cref="T:System.Transactions.TransactionScope"/></para>
            <para>说明：如果当前上下文已存在事务，那么这个事务范围将加入已有的事务。否则，它将创建自己的事务</para>
            </remarks>
        </member>
        <member name="P:QingShan.Core.FreeSql.UnitOfWork.Attributes.UnitOfWorkAttribute.IsolationLevel">
            <summary>
            事务隔离级别
            </summary>
            <remarks>
            <para>默认：<see cref="F:System.Transactions.IsolationLevel.ReadCommitted"/>，参见：<see cref="P:QingShan.Core.FreeSql.UnitOfWork.Attributes.UnitOfWorkAttribute.IsolationLevel"/></para>
            <para>说明：当事务A更新某条数据的时候，不容许其他事务来更新该数据，但可以进行读取操作</para>
            </remarks>
        </member>
        <member name="P:QingShan.Core.FreeSql.UnitOfWork.Attributes.UnitOfWorkAttribute.AsyncFlowOption">
            <summary>
            跨线程异步流
            </summary>
            <remarks>
            <para>默认：<see cref="F:System.Transactions.TransactionScopeAsyncFlowOption.Enabled"/>，参见：<see cref="T:System.Transactions.TransactionScopeAsyncFlowOption"/></para>
            <para>说明：允许跨线程连续任务的事务流，如有异步操作需开启该选项</para>
            </remarks>
        </member>
        <member name="T:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorAttribute">
            <summary>
            自动事务提交过滤器，在<see cref="M:Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate)"/>方法中执行拦截进行事务提交
            <para>继承自<see cref="T:Microsoft.AspNetCore.Mvc.ServiceFilterAttribute"/>在过滤器<see cref="T:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter"/>中使用依赖注入</para>
            </summary>
        </member>
        <member name="P:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorAttribute.Propagation">
            <summary>
            事务传播方式
            <para>默认方式为<see cref="F:FreeSql.Propagation.Required"/></para>
            </summary>
        </member>
        <member name="P:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorAttribute.IsolationLevel">
            <summary>
            事务隔离级别
            </summary>
            <remarks>
            <para>默认：<see cref="F:System.Data.IsolationLevel.ReadCommitted"/>，参见：<see cref="P:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorAttribute.IsolationLevel"/></para>
            <para>说明：当事务A更新某条数据的时候，不容许其他事务来更新该数据，但可以进行读取操作</para>
            </remarks>
        </member>
        <member name="M:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorAttribute.#ctor(System.Data.IsolationLevel)">
            <summary>
            构造函数
            <para>支持传入 事务级别 <see cref="P:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorAttribute.IsolationLevel"/> 参数值</para>
            </summary>
            <param name="isolationLevel">事务隔离级别</param>
        </member>
        <member name="M:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorAttribute.#ctor(FreeSql.Propagation,System.Data.IsolationLevel)">
            <summary>
            <para>支持传入 事务传播方式 <see cref="P:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorAttribute.Propagation"/>，事务级别 <see cref="P:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorAttribute.IsolationLevel"/> 参数值</para>
            </summary>
            <param name="propagation">事务传播方式</param>
            <param name="isolationLevel">事务隔离级别</param>
        </member>
        <member name="T:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorFilterImpl">
            <summary>
            事务拦截注入
            </summary>
        </member>
        <member name="M:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorFilterImpl.#ctor(System.IServiceProvider)">
            <summary>
            初始化一个<see cref="T:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorFilterImpl"/>类型的新实例
            </summary>
        </member>
        <member name="P:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorFilterImpl.Order">
            <summary>
            过滤器执行的顺序是由Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order的升序排序决定的
            <para>该值越低执行越靠前</para>
            </summary>
        </member>
        <member name="M:QingShan.Core.FreeSql.UnitOfWork.TransactionInterceptor.TransactionInterceptorFilterImpl.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            在操作之前和模型绑定完成之后异步调用。
            <parm>在这里开启事务</parm>
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:QingShan.Core.FriendlyException.ErrorCodeItemMetadataAttribute">
            <summary>
            异常元数据特性
            </summary>
        </member>
        <member name="M:QingShan.Core.FriendlyException.ErrorCodeItemMetadataAttribute.#ctor(System.String,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="errorMessage">错误消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="P:QingShan.Core.FriendlyException.ErrorCodeItemMetadataAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:QingShan.Core.FriendlyException.ErrorCodeItemMetadataAttribute.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="T:QingShan.Core.FriendlyException.ErrorCodeTypeAttribute">
            <summary>
            错误代码类型特性
            </summary>
        </member>
        <member name="T:QingShan.Core.FriendlyException.IfExceptionAttribute">
            <summary>
            异常复写特性
            </summary>
        </member>
        <member name="M:QingShan.Core.FriendlyException.IfExceptionAttribute.#ctor(System.Object,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="errorCode">错误编码</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="P:QingShan.Core.FriendlyException.IfExceptionAttribute.ErrorCode">
            <summary>
            错误编码
            </summary>
        </member>
        <member name="F:QingShan.Core.FriendlyException.IfExceptionAttribute._errorMessage">
            <summary>
            私有异常消息
            </summary>
        </member>
        <member name="P:QingShan.Core.FriendlyException.IfExceptionAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:QingShan.Core.FriendlyException.IfExceptionAttribute.Args">
            <summary>
            格式化参数
            </summary>
        </member>
        <member name="T:QingShan.Core.FriendlyException.MethodIfException">
            <summary>
            方法异常类
            </summary>
        </member>
        <member name="P:QingShan.Core.FriendlyException.MethodIfException.ErrorMethod">
            <summary>
            出异常的方法
            </summary>
        </member>
        <member name="P:QingShan.Core.FriendlyException.MethodIfException.IfExceptionAttributes">
            <summary>
            异常特性
            </summary>
        </member>
        <member name="T:QingShan.Core.FriendlyException.Oops">
            <summary>
            抛异常静态类
            </summary>
        </member>
        <member name="F:QingShan.Core.FriendlyException.Oops.ErrorMethods">
            <summary>
            方法错误异常特性
            </summary>
        </member>
        <member name="F:QingShan.Core.FriendlyException.Oops.ErrorCodeTypes">
            <summary>
            错误代码类型
            </summary>
        </member>
        <member name="F:QingShan.Core.FriendlyException.Oops.ErrorCodeMessages">
            <summary>
            错误消息字典
            </summary>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.Oh(System.String,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.Oh(System.String,System.Type,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="exceptionType">具体异常类型</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.Oh(System.Object,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.Oh(System.Object,System.Type,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="exceptionType">具体异常类型</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.FormatErrorMessage(System.String,System.Object[])">
            <summary>
            格式化错误消息
            </summary>
            <param name="errorMessage">错误消息</param>
            <param name="args">格式化参数</param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.GetErrorCodeMessage(System.Object,System.Object[])">
            <summary>
            获取错误码消息
            </summary>
            <param name="errorCode"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.HandleEnumErrorCode(System.Object)">
            <summary>
            处理枚举类型错误码
            </summary>
            <param name="errorCode">错误码</param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.GetErrorCodeTypes(QingShan.Core.FriendlyException.IErrorCodeTypeProvider)">
            <summary>
            获取错误代码类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.GetErrorCodeMessages(QingShan.Core.FriendlyException.ErrorCodeMessageSettingsOptions)">
            <summary>
            获取所有错误消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.FixErrorCodeSettingMessage(System.Object[])">
            <summary>
            处理异常配置数据
            </summary>
            <param name="errorCodes">错误消息配置对象</param>
            <remarks>
            方式：数组第一个元素为错误码，第二个参数为错误消息，剩下的参数为错误码格式化字符串
            </remarks>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.GetEndPointExceptionMethod">
            <summary>
            获取堆栈中顶部抛异常方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.FriendlyException.Oops.GetErrorCodeItemMessage(System.Reflection.FieldInfo)">
            <summary>
            获取错误代码消息实体
            </summary>
            <param name="fieldInfo">字段对象</param>
            <returns>(object key, object value)</returns>
        </member>
        <member name="T:QingShan.Core.FriendlyException.ErrorCodeMessageSettingsOptions">
            <summary>
            异常配置选项，最优的方式是采用后期配置，也就是所有异常状态码先不设置（推荐）
            </summary>
        </member>
        <member name="P:QingShan.Core.FriendlyException.ErrorCodeMessageSettingsOptions.Definitions">
            <summary>
            异常状态码配置列表
            </summary>
        </member>
        <member name="T:QingShan.Core.FriendlyException.IErrorCodeTypeProvider">
            <summary>
            异常错误代码提供器
            </summary>
        </member>
        <member name="P:QingShan.Core.FriendlyException.IErrorCodeTypeProvider.Definitions">
            <summary>
            错误代码定义类型
            </summary>
        </member>
        <member name="T:QingShan.Core.JWT.JWTEncryption">
            <summary>
            JWT 加解密
            </summary>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.Encrypt(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <summary>
            生成 Token
            </summary>
            <param name="payload"></param>
            <param name="expiredTime"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.Encrypt(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            生成 Token
            </summary>
            <param name="issuerSigningKey"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.Encrypt(System.String,System.String)">
            <summary>
            生成 Token
            </summary>
            <param name="issuerSigningKey"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.GenerateRefreshToken(System.String,System.Int32)">
            <summary>
            生成刷新 Token
            </summary>
            <param name="accessToken"></param>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.Exchange(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            通过过期Token 和 刷新Token 换取新的 Token
            </summary>
            <param name="expiredToken"></param>
            <param name="refreshToken"></param>
            <param name="expiredTime"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.AutoRefreshToken(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext,System.Nullable{System.Int64},System.Int32)">
            <summary>
            自动刷新 Token 信息
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <param name="expiredTime"></param>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.Validate(System.String)">
            <summary>
            验证 Token
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.ValidateJwtBearerToken(Microsoft.AspNetCore.Http.DefaultHttpContext,Microsoft.IdentityModel.JsonWebTokens.JsonWebToken@,System.String)">
            <summary>
            验证 Token
            </summary>
            <param name="httpContext"></param>
            <param name="token"></param>
            <param name="headerKey"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.ReadJwtToken(System.String)">
            <summary>
            读取 Token，不含验证
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.GetJwtBearerToken(Microsoft.AspNetCore.Http.DefaultHttpContext,System.String)">
            <summary>
            获取 JWT Bearer Token
            </summary>
            <param name="httpContext"></param>
            <param name="headerKey"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.GetJWTSettings">
            <summary>
            获取 JWT 配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.CreateTokenValidationParameters(QingShan.Core.JWT.JWTSettingsOptions)">
            <summary>
            生成Token验证参数
            </summary>
            <param name="jwtSettings"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.JWT.JWTEncryption.CombinePayload(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <summary>
            组合 Claims 负荷
            </summary>
            <param name="payload"></param>
            <param name="expiredTime">过期时间，单位：分钟</param>
            <returns></returns>
        </member>
        <member name="F:QingShan.Core.JWT.JWTEncryption.StationaryClaimTypes">
            <summary>
            固定的 Claim 类型
            </summary>
        </member>
        <member name="P:QingShan.Core.JWT.JWTSettingsOptions.ValidateIssuerSigningKey">
            <summary>
            验证签发方密钥
            </summary>
        </member>
        <member name="P:QingShan.Core.JWT.JWTSettingsOptions.IssuerSigningKey">
            <summary>
            签发方密钥
            </summary>
        </member>
        <member name="P:QingShan.Core.JWT.JWTSettingsOptions.ValidateIssuer">
            <summary>
            验证签发方
            </summary>
        </member>
        <member name="P:QingShan.Core.JWT.JWTSettingsOptions.ValidIssuer">
            <summary>
            签发方
            </summary>
        </member>
        <member name="P:QingShan.Core.JWT.JWTSettingsOptions.ValidateAudience">
            <summary>
            验证签收方
            </summary>
        </member>
        <member name="P:QingShan.Core.JWT.JWTSettingsOptions.ValidAudience">
            <summary>
            签收方
            </summary>
        </member>
        <member name="P:QingShan.Core.JWT.JWTSettingsOptions.ValidateLifetime">
            <summary>
            验证生存期
            </summary>
        </member>
        <member name="P:QingShan.Core.JWT.JWTSettingsOptions.ClockSkew">
            <summary>
            过期时间容错值，解决服务器端时间不同步问题（秒）
            </summary>
        </member>
        <member name="P:QingShan.Core.JWT.JWTSettingsOptions.ExpiredTime">
            <summary>
            过期时间（分钟）
            </summary>
        </member>
        <member name="M:QingShan.Core.RateLimit.Options.MineIpRateLimitOptions.PostConfigure(QingShan.Core.RateLimit.Options.MineIpRateLimitOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:QingShan.Core.RateLimit.RateLimitStore`1">
            <summary>
            重写Redis
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:QingShan.Core.Redis.Models.CacheInfo.Host">
            <summary>
            host
            </summary>
        </member>
        <member name="P:QingShan.Core.Redis.Models.CacheInfo.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:QingShan.Core.Redis.Models.CacheInfo.InstanceName">
            <summary>
            key前缀
            </summary>
        </member>
        <member name="P:QingShan.Core.Redis.Models.CacheInfo.DefaultDatabase">
            <summary>
            默认 库
            </summary>
        </member>
        <member name="T:QingShan.Core.Redis.Options.CacheOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:QingShan.Core.Redis.Options.CacheOption.CacheWay">
            <summary>
            缓存方式 Redis
            </summary>
        </member>
        <member name="M:QingShan.Core.Redis.RedisCache.GetAsync(System.String)">
            <summary>
            获取string类型
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.Redis.RedisCache.GetAsync``1(System.String)">
            <summary>
            获得给定键的值。
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.Redis.RedisCache.SetAsync(System.String,System.Object,System.Int32)">
            <summary>
             设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key"></param>
            <param name="data"></param>
            <param name="timeoutSeconds">过期(秒单位)</param>
        </member>
        <member name="M:QingShan.Core.Redis.RedisCache.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
             设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key"></param>
            <param name="data"></param>
            <param name="expirationTime">过期</param>
        </member>
        <member name="M:QingShan.Core.Redis.RedisCache.DeleteAsync(System.String)">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder._specificationDocumentSettings">
            <summary>
            规范化文档配置
            </summary>
        </member>
        <member name="F:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder._defaultGroups">
            <summary>
            文档默认分组
            </summary>
        </member>
        <member name="F:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder._groups">
            <summary>
            文档分组列表
            </summary>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.CreateSwaggerDocs(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            创建分组文档
            </summary>
            <param name="swaggerGenOptions">Swagger生成器对象</param>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.BuildGen(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            构建Swagger全局配置
            </summary>
            <param name="swaggerOptions">Swagger 全局配置</param>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.ConfigureSecurities(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置授权
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.LoadXmlComments(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            加载注释描述文件
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.ReadGroups">
            <summary>
            读取所有分组信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.GetControllerGroupsCached">
            <summary>
            </summary>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.GetControllerGroups(System.Type)">
            <summary>
            获取控制器分组列表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.ResolveGroupOrder(System.String)">
            <summary>
            解析分组名称中的排序
            </summary>
            <param name="group">分组名</param>
            <returns></returns>
        </member>
        <member name="F:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.GetGroupOpenApiInfoCached">
            <summary>
            </summary>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.GetGroupOpenApiInfo(System.String)">
            <summary>
            获取分组配置信息
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.IsAction(System.Reflection.MethodInfo,System.Type)">
            <summary>
            是否是动作方法
            </summary>
            <param name="method">方法</param>
            <param name="declaringType">声明类型</param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.BuildUI(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String)">
            <summary>
            Swagger UI 构建
            </summary>
            <param name="swaggerUIOptions"></param>
            <param name="routePrefix">api地址</param>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.CreateGroupEndpoint(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            配置分组终点路由
            </summary>
            <param name="swaggerUIOptions"></param>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentBuilder.Build(Swashbuckle.AspNetCore.Swagger.SwaggerOptions)">
            <summary>
            构建Swagger全局配置
            </summary>
            <param name="swaggerOptions">Swagger 全局配置</param>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.Extensions.TypeExtensions.IsDynamicController(System.Type)">
            <summary>
            判断类型是否是动态Controller
            </summary>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.Extensions.TypeExtensions.IsDynamicController(System.Reflection.TypeInfo)">
            <summary>
            判断类型是否是动态Controller
            </summary>
        </member>
        <member name="T:QingShan.Core.SpecificationDocument.EnumSchemaFilter">
            <summary>
            修正 规范化文档 Enum 提示
            </summary>
            <remarks>
            参考https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/1269#issuecomment-577182931
            </remarks>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.EnumSchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            实现过滤器方法
            </summary>
            <param name="model"></param>
            <param name="context"></param>
        </member>
        <member name="T:QingShan.Core.SpecificationDocument.GroupOrder">
            <summary>
            分组-排序
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.GroupOrder.Group">
            <summary>
            分组名
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.GroupOrder.Order">
            <summary>
            分组排序
            </summary>
        </member>
        <member name="T:QingShan.Core.SpecificationDocument.SpecificationOpenApiInfo">
            <summary>
            规范化文档开放接口信息
            </summary>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationOpenApiInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:QingShan.Core.SpecificationDocument.SpecificationOpenApiInfo._group">
            <summary>
            分组私有字段
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationOpenApiInfo.Group">
            <summary>
            所属组
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationOpenApiInfo.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem.Scheme">
            <summary>
            安全Schema
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem.Accesses">
            <summary>
            权限
            </summary>
        </member>
        <member name="T:QingShan.Core.SpecificationDocument.SpecificationOpenApiSecurityScheme">
            <summary>
            规范化稳定安全配置
            </summary>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationOpenApiSecurityScheme.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationOpenApiSecurityScheme.Id">
            <summary>
            唯一Id
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationOpenApiSecurityScheme.Requirement">
            <summary>
            安全需求
            </summary>
        </member>
        <member name="T:QingShan.Core.SpecificationDocument.SpecificationDocumentSettingsOptions">
            <summary>
            规范化文档配置选项
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationDocumentSettingsOptions.DocumentTitle">
            <summary>
            文档标题
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationDocumentSettingsOptions.DefaultGroupName">
            <summary>
            默认分组名
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationDocumentSettingsOptions.EnableAuthorized">
            <summary>
            启用授权支持
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationDocumentSettingsOptions.FormatAsV2">
            <summary>
            格式化为V2版本
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationDocumentSettingsOptions.RoutePrefix">
            <summary>
            配置规范化文档地址
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationDocumentSettingsOptions.DocExpansionState">
            <summary>
            文档展开设置
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationDocumentSettingsOptions.XmlComments">
            <summary>
            XML 描述文件
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationDocumentSettingsOptions.GroupOpenApiInfos">
            <summary>
            分组信息
            </summary>
        </member>
        <member name="P:QingShan.Core.SpecificationDocument.SpecificationDocumentSettingsOptions.SecurityDefinitions">
            <summary>
            安全定义
            </summary>
        </member>
        <member name="M:QingShan.Core.SpecificationDocument.SpecificationDocumentSettingsOptions.PostConfigure(QingShan.Core.SpecificationDocument.SpecificationDocumentSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:QingShan.Attributes.ApiResponseFilterAttribute">
            <summary>
            Api action统一处理过滤器
            </summary>
        </member>
        <member name="T:QingShan.Attributes.AreaInfoAttribute">
            <summary>
            区域信息特性，可配置区域显示名称，此属性与“<see cref="T:Microsoft.AspNetCore.Mvc.AreaAttribute"/>与<see cref="T:System.ComponentModel.DisplayNameAttribute"/>”组合等效，在无Area的类型，推荐只使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>
            </summary>
        </member>
        <member name="M:QingShan.Attributes.AreaInfoAttribute.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Microsoft.AspNetCore.Mvc.AreaAttribute" /> instance.
            </summary>
            <param name="areaName">The area containing the controller or action.</param>
        </member>
        <member name="P:QingShan.Attributes.AreaInfoAttribute.Display">
            <summary>
            获取或设置 区域的显示名称
            </summary>
        </member>
        <member name="M:QingShan.Attributes.DbDescriptionAttribute.#ctor(System.String)">
            <summary>
            初始化新的实例
            </summary>
            <param name="description">说明内容</param>
        </member>
        <member name="P:QingShan.Attributes.DbDescriptionAttribute.Description">
            <summary>
            说明
            </summary>
        </member>
        <member name="T:QingShan.Attributes.MapFromAttribute">
            <summary>
            标注当前类型从源类型的Mapping映射关系
            </summary>
        </member>
        <member name="P:QingShan.Attributes.MapFromAttribute.SourceTypes">
            <summary>
            源类型
            </summary>
        </member>
        <member name="T:QingShan.Attributes.MapToAttribute">
            <summary>
            标注当前类型映射到目标类型的Mapping映射关系
            </summary>
        </member>
        <member name="M:QingShan.Attributes.MapToAttribute.#ctor(System.Type[])">
            <summary>
            初始化一个<see cref="T:QingShan.Attributes.MapToAttribute"/>类型的新实例
            </summary>
        </member>
        <member name="P:QingShan.Attributes.MapToAttribute.TargetTypes">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="T:QingShan.Attributes.LoggedInAttribute">
            <summary>
            指定功能需要登录才能访问
            </summary>
        </member>
        <member name="T:QingShan.Attributes.NonFunctionAttribute">
            <summary>
            标注当前Action不作为Function信息进行收集
            </summary>
        </member>
        <member name="T:QingShan.Attributes.Permission.PermissionAttribute">
            <summary>
            启用权限
            </summary>
        </member>
        <member name="M:QingShan.Attributes.Permission.PermissionAttribute.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            验证
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:QingShan.Attributes.RoleLimitAttribute">
            <summary>
            指定功能只允许特定角色可以访问
            </summary>
        </member>
        <member name="T:QingShan.Authorization.AppAuthorizeHandler">
            <summary>
            授权策略执行程序
            </summary>
        </member>
        <member name="M:QingShan.Authorization.AppAuthorizeHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            授权验证核心方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Authorization.AppAuthorizeHandler.PipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext)">
            <summary>
            验证管道
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Authorization.AppAuthorizeHandler.PolicyPipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)">
            <summary>
            策略验证管道
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="M:QingShan.Authorization.AppAuthorizeHandler.AuthorizeHandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            授权处理
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:QingShan.Authorization.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:QingShan.Authorization.Penetrates.AppAuthorizePrefix">
            <summary>
            授权策略前缀
            </summary>
        </member>
        <member name="T:QingShan.Authorization.AppAuthorizeProvider">
            <summary>
            授权策略提供器
            </summary>
        </member>
        <member name="P:QingShan.Authorization.AppAuthorizeProvider.FallbackPolicyProvider">
            <summary>
            默认回退策略
            </summary>
        </member>
        <member name="M:QingShan.Authorization.AppAuthorizeProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authorization.AuthorizationOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:QingShan.Authorization.AppAuthorizeProvider.GetDefaultPolicyAsync">
            <summary>
            获取默认策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:QingShan.Authorization.AppAuthorizeProvider.GetFallbackPolicyAsync">
            <summary>
            获取回退策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:QingShan.Authorization.AppAuthorizeProvider.GetPolicyAsync(System.String)">
            <summary>
            获取策略
            </summary>
            <param name="policyName"></param>
            <returns></returns>
        </member>
        <member name="T:QingShan.Authorization.AppAuthorizeRequirement">
            <summary>
            策略对应的需求
            </summary>
        </member>
        <member name="M:QingShan.Authorization.AppAuthorizeRequirement.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="policies"></param>
        </member>
        <member name="P:QingShan.Authorization.AppAuthorizeRequirement.Policies">
            <summary>
            策略
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions">
            <summary>
            应用中间件拓展类（由框架内部调用）
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseInject(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)">
            <summary>
            注入基础中间件（带Swagger）
            </summary>
            <param name="app"></param>
            <param name="routePrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseInjectBase(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注入基础中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseApp(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            添加应用中间件
            </summary>
            <param name="app">应用构建器</param>
            <param name="configure">应用配置</param>
            <returns>应用构建器</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.CorsAccessorApplicationBuilderExtensions">
            <summary>
            跨域中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.CorsAccessorApplicationBuilderExtensions.UseCorsAccessor(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加跨域中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.RateLimitBuilderExtensions">
            <summary>
            使用限流
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.RateLimitBuilderExtensions.UseRateLimit(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)">
            <summary>
            使用限流
            </summary>
            <param name="app"></param>
            <param name="routePrefix"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.SpecificationDocumentsBuilderExtensions">
            <summary>
            规范化文档中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SpecificationDocumentsBuilderExtensions.UseSpecificationDocuments(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)">
            <summary>
            添加规范化文档中间件
            </summary>
            <param name="app"></param>
            <param name="routePrefix"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.AppAuthorizeAttribute">
            <summary>
            策略授权特性
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.AppAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="policies">多个策略</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.AppAuthorizeAttribute.Policies">
            <summary>
            策略
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute">
            <summary>
            安全定义特性
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="resourceId"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute.ResourceId">
            <summary>
            资源Id，必须是唯一的
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions">
            <summary>
            授权处理上下文拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions.GetCurrentHttpContext(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            获取当前 HttpContext 上下文
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter">
            <summary>
            友好异常拦截器
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute">
            <summary>
            接口描述设置
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="groups">分组列表</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Name">
            <summary>
            自定义名称
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.KeepName">
            <summary>
            保留原有名称
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.SplitCamelCase">
            <summary>
            切割骆驼命名
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.KeepVerb">
            <summary>
            保留路由谓词
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Module">
            <summary>
            模块名
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Groups">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions">
            <summary>
            应用服务集合拓展类（由框架内部调用）
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInject(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            服务注入基础配置
            </summary>
            <param name="services">服务集合</param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddApp(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            添加应用配置
            </summary>
            <param name="services">服务集合</param>
            <param name="configure">服务配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddStartup(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加 Startup 自动扫描
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.GetOrder(System.Type)">
            <summary>
            获取 Startup 排序
            </summary>
            <param name="type">排序类型</param>
            <returns>int</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.GetOptions``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
             <summary>
            获取选项
             </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.GetOptions``1(Microsoft.Extensions.DependencyInjection.ServiceProvider)">
             <summary>
            获取选项
             </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions">
            <summary>
            策略授权服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAppAuthorization``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Boolean)">
            <summary>
            添加策略授权服务
            </summary>
            <typeparam name="TAuthorizationHandler">策略授权处理程序</typeparam>
            <param name="services">服务集合</param>
            <param name="configure">自定义配置</param>
            <param name="enableGlobalAuthorize">是否启用全局授权</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CorsAccessorServiceCollectionExtensions">
            <summary>
            跨域访问服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CorsAccessorServiceCollectionExtensions.AddCorsAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置跨域
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DatabaseAccessorServiceCollectionExtensions">
            <summary>
            数据库访问器服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DatabaseAccessorServiceCollectionExtensions.AddDatabaseAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            添加数据库上下文
            </summary>
            <param name="services">服务集合</param>
            <param name="configure">配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions">
            <summary>
            友好异常服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Boolean)">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <typeparam name="TErrorCodeTypeProvider">异常错误码提供器</typeparam>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="enabledGlobalExceptionFilter">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Boolean)">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="enabledGlobalExceptionFilter">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.JWTServiceCollectionExtensions">
            <summary>
            JWT 授权服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JWTServiceCollectionExtensions.AddJwt(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Object,System.Action{Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions},System.Boolean)">
            <summary>
            添加 JWT 授权
            </summary>
            <param name="authenticationBuilder"></param>
            <param name="tokenValidationParameters">token 验证参数</param>
            <param name="jwtBearerConfigure"></param>
            <param name="enableGlobalAuthorize">启动全局授权</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JWTServiceCollectionExtensions.AddJwt(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationOptions},System.Object,System.Action{Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions})">
            <summary>
            添加 JWT 授权
            </summary>
            <param name="services"></param>
            <param name="authenticationConfigure">授权配置</param>
            <param name="tokenValidationParameters">token 验证参数</param>
            <param name="jwtBearerConfigure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JWTServiceCollectionExtensions.AddJwt``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationOptions},System.Object,System.Action{Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions},System.Boolean)">
            <summary>
            添加 JWT 授权
            </summary>
            <typeparam name="TAuthorizationHandler"></typeparam>
            <param name="services"></param>
            <param name="authenticationConfigure"></param>
            <param name="tokenValidationParameters"></param>
            <param name="jwtBearerConfigure"></param>
            <param name="enableGlobalAuthorize"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JWTServiceCollectionExtensions.ConfigureJWTOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加 JWT 授权
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RateLimitServiceCollection.AddRateLimit(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            添加限流
            </summary>
            <param name="services">服务集合</param>
            <param name="configure">配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RedisCollectionExtension.AddCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加缓存
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions">
            <summary>
            规范化接口服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions.AddSpecificationDocuments(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化文档服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.HostBuilderExtensions">
            <summary>
            主机构建器拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.Inject(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)">
            <summary>
            Web 主机注入
            </summary>
            <param name="hostBuilder">Web主机构建器</param>
            <param name="assemblyName">外部程序集名称</param>
            <returns>IWebHostBuilder</returns>
        </member>
        <member name="T:FreeSql.ISelectExtension">
            <summary>
            <see cref="T:FreeSql.ISelect0"/>拓展
            </summary>
        </member>
        <member name="M:FreeSql.ISelectExtension.ToPageResultAsync``2(FreeSql.ISelect{``0},QingShan.Data.PageBaseInputDto,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},QingShan.Core.Core.DatabaseAccessor.Enums.SortType)">
            <summary>
            分页
            </summary>
            <typeparam name="TSoure">数据源</typeparam>
            <typeparam name="TReturn">映射Dto</typeparam>
            <param name="select"></param>
            <param name="pageInputDto"></param>
            <param name="where"></param>
            <param name="order"></param>
            <param name="sortType"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectExtension.ToPageResultAsync``4(FreeSql.ISelect{``0,``1,``2},QingShan.Data.PageBaseInputDto,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}},QingShan.Core.Core.DatabaseAccessor.Enums.SortType)">
            <summary>
            分页
            </summary>
            <typeparam name="TReturn">映射Dto</typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="select"></param>
            <param name="pageInputDto"></param>
            <param name="where"></param>
            <param name="order"></param>
            <param name="sortType"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectExtension.ToPageResultAsync``3(FreeSql.ISelect{``0,``1},QingShan.Data.PageBaseInputDto,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}},QingShan.Core.Core.DatabaseAccessor.Enums.SortType)">
            <summary>
            分页
            </summary>
            <typeparam name="TReturn">映射Dto</typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="select"></param>
            <param name="pageInputDto"></param>
            <param name="where"></param>
            <param name="order"></param>
            <param name="sortType"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectExtension.ToListAsync``4(FreeSql.ISelect{``0,``1,``2},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Tolist
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="query"></param>
            <param name="select"></param>
            <returns></returns>
        </member>
    </members>
</doc>
