<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QS.Core.Web</name>
    </assembly>
    <members>
        <member name="T:QS.Core.Web.Areas.Admin.Controllers.AccountController">
            <summary>
            用户授权控制器
            </summary>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.AccountController.Login(QS.ServiceLayer.Account.Dto.LoginInputDto)">
            <summary>
            用户登录
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="T:QS.Core.Web.Areas.Admin.Controllers.AdminBaseController">
            <summary>
            admin控制器基类
            </summary>
        </member>
        <member name="T:QS.Core.Web.Areas.Admin.Controllers.HomeController">
            <summary>
            首页
            </summary>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.HomeController.Index">
            <summary>
            获取
            </summary>
            <returns></returns>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.HomeController.Add(QS.ServiceLayer.ProductService.Dtos.ProductInputDto)">
            <summary>
            添加
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.HomeController.Delete(QS.ServiceLayer.ProductService.Dtos.IdDto)">
            <summary>
            删除
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="T:QS.Core.Web.Areas.Admin.Controllers.RoleController">
            <summary>
            角色管理
            </summary>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.RoleController.Add(QS.ServiceLayer.System.Role.Dto.InputDto.RoleInputDto)">
            <summary>
            新增角色
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.RoleController.Update(QS.ServiceLayer.System.Role.Dto.InputDto.RoleInputDto)">
            <summary>
            修改角色
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.RoleController.GetInfo(QS.Core.Data.CommonIdInputDto)">
            <summary>
            获取角色详情信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.RoleController.GetPage(QS.Core.Data.PageInputDto)">
            <summary>
            获取角色列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.RoleController.Delete(QS.Core.Data.CommonIdInputDto)">
            <summary>
            删除角色信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:QS.Core.Web.Areas.Admin.Controllers.UserController">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.UserController.Add(QS.ServiceLayer.User.Dtos.InputDto.UserAddInputDto)">
            <summary>
            新增用户
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.UserController.Update(QS.ServiceLayer.User.Dtos.InputDto.UserUpdateInputDto)">
            <summary>
            修改用户
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.UserController.GetUserInfo">
            <summary>
            获取当前登录用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.UserController.GetInfo(QS.Core.Data.CommonIdInputDto)">
            <summary>
            获取用户详情信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.UserController.GetUserPage(QS.Core.Data.PageInputDto)">
            <summary>
            获取用户列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:QS.Core.Web.Areas.Admin.Controllers.UserController.Delete(QS.Core.Data.CommonIdInputDto)">
            <summary>
            删除用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:QS.Core.Web.Authorization.IModuleManager.GetModules">
            <summary>
            收集模块信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:QS.Core.Web.Authorization.ModuleManager">
            <summary>
            模块管理
            </summary>
        </member>
        <member name="M:QS.Core.Web.Authorization.ModuleManager.GetModules">
            <summary>
            收集模块
            </summary>
        </member>
        <member name="M:QS.Core.Web.Authorization.ModuleManager.GetModule(System.Type)">
            <summary>
            获取当前类中所有数据
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:QS.Core.Web.Authorization.ModuleManager.GetModule(System.Reflection.MethodInfo,QS.ServiceLayer.Permission.Dto.ModuleInfo,System.Type,System.Int32)">
            <summary>
            重写以实现从方法信息中提取模块信息
            </summary>
            <param name="method">方法信息</param>
            <param name="moduleInfo">所在类型模块信息</param>
            <param name="index">序号</param>
            <param name="type"></param>
            <returns>提取到的模块信息</returns>
        </member>
        <member name="T:QS.Core.Web.Controllers.UploadController">
            <summary>
            
            </summary>
        </member>
        <member name="F:QS.Core.Web.Controllers.UploadController._env">
            <summary>
            
            </summary>
        </member>
        <member name="M:QS.Core.Web.Controllers.UploadController.UploadFile(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传文件
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:QS.Core.Web.Filter.InternalServerErrorObjectResult">
            <summary>
            服务器异常返回
            </summary>
        </member>
        <member name="T:QS.Core.Web.Filter.Transaction.TransactionInterceptorAttribute">
            <summary>
            自动事务提交过滤器，在<see cref="M:Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate)"/>方法中执行<see cref="!:EFContext.Database.BeginTransactionAsync()"/>进行事务提交
            <para>继承自<see cref="T:Microsoft.AspNetCore.Mvc.ServiceFilterAttribute"/>在过滤器<see cref="T:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter"/>中使用依赖注入</para>
            </summary>
        </member>
        <member name="M:QS.Core.Web.Filter.Transaction.TransactionInterceptorAttribute.#ctor(System.Transactions.IsolationLevel)">
            <summary>
            构造函数
            <para>支持传入 事务级别 <see cref="P:QS.Core.Web.Filter.Transaction.TransactionInterceptorAttribute.IsolationLevel"/> 参数值</para>
            </summary>
            <param name="isolationLevel">事务隔离级别</param>
        </member>
        <member name="M:QS.Core.Web.Filter.Transaction.TransactionInterceptorAttribute.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.IsolationLevel)">
            <summary>
            <para>支持传入 事务范围 <see cref="T:System.Transactions.TransactionScope"/>，事务级别 <see cref="P:QS.Core.Web.Filter.Transaction.TransactionInterceptorAttribute.IsolationLevel"/> 参数值</para>
            </summary>
            <param name="scopeOption">事务范围</param>
            <param name="isolationLevel">事务隔离级别</param>
        </member>
        <member name="P:QS.Core.Web.Filter.Transaction.TransactionInterceptorAttribute.ScopeOption">
            <summary>
            事务范围
            </summary>
            <remarks>
            <para>默认：<see cref="F:System.Transactions.TransactionScopeOption.Required"/>，参见：<see cref="T:System.Transactions.TransactionScope"/></para>
            <para>说明：如果当前上下文已存在事务，那么这个事务范围将加入已有的事务。否则，它将创建自己的事务</para>
            </remarks>
        </member>
        <member name="P:QS.Core.Web.Filter.Transaction.TransactionInterceptorAttribute.IsolationLevel">
            <summary>
            事务隔离级别
            </summary>
            <remarks>
            <para>默认：<see cref="F:System.Transactions.IsolationLevel.ReadCommitted"/>，参见：<see cref="P:QS.Core.Web.Filter.Transaction.TransactionInterceptorAttribute.IsolationLevel"/></para>
            <para>说明：当事务A更新某条数据的时候，不容许其他事务来更新该数据，但可以进行读取操作</para>
            </remarks>
        </member>
        <member name="P:QS.Core.Web.Filter.Transaction.TransactionInterceptorAttribute.AsyncFlowOption">
            <summary>
            跨线程异步流
            </summary>
            <remarks>
            <para>默认：<see cref="F:System.Transactions.TransactionScopeAsyncFlowOption.Enabled"/>，参见：<see cref="T:System.Transactions.TransactionScopeAsyncFlowOption"/></para>
            <para>说明：允许跨线程连续任务的事务流，如有异步操作需开启该选项</para>
            </remarks>
        </member>
        <member name="T:QS.Core.Web.Filter.Transaction.TransactionInterceptorFilterImpl">
            <summary>
            事务拦截注入
            </summary>
        </member>
        <member name="M:QS.Core.Web.Filter.Transaction.TransactionInterceptorFilterImpl.#ctor(System.IServiceProvider)">
            <summary>
            初始化一个<see cref="T:QS.Core.Web.Filter.Transaction.TransactionInterceptorFilterImpl"/>类型的新实例
            </summary>
        </member>
        <member name="P:QS.Core.Web.Filter.Transaction.TransactionInterceptorFilterImpl.Order">
            <summary>
            过滤器执行的顺序是由Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order的升序排序决定的
            <para>该值越低执行越靠前</para>
            </summary>
        </member>
        <member name="M:QS.Core.Web.Filter.Transaction.TransactionInterceptorFilterImpl.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            在操作之前和模型绑定完成之后异步调用。
            <parm>在这里开启事务</parm>
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:QS.Core.Web.Permission.PermissionMiddleware">
            <summary>
            权限中间件
            </summary>
        </member>
        <member name="M:QS.Core.Web.Permission.Permission.UsePermission(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用权限收集
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:QS.Core.Web.Permission.PolicyRequirement">
            <summary>
            权限承载实体
            <para>该类主要用于获取所有权限</para>
            </summary>
        </member>
        <member name="P:QS.Core.Web.Permission.PolicyRequirement.UserPermissions">
            <summary>
            用户权限集合
            </summary>
        </member>
        <member name="P:QS.Core.Web.Permission.PolicyRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="M:QS.Core.Web.Permission.PolicyRequirement.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:QS.Core.Web.Permission.UserPermission">
            <summary>
            用户权限承载实体
            </summary>
        </member>
        <member name="P:QS.Core.Web.Permission.UserPermission.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:QS.Core.Web.Permission.UserPermission.Url">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="M:QS.Core.Web.Services.AuthorizationService.AddAuthorizationService(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加授权
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:QS.Core.Web.Services.CacheService">
            <summary>
            缓存服务
            </summary>
        </member>
        <member name="M:QS.Core.Web.Services.CacheService.AddCacheService(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加缓存服务
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:QS.Core.Web.Services.CorsService.AddCorsService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            跨域
            </summary>
            <param name="services"></param>
        </member>
    </members>
</doc>
